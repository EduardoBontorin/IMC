@using IMC2.Models
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<EditForm Model="@_model" OnValidSubmit="@OnValidSubmitAsync"> 
    <DataAnnotationsValidator></DataAnnotationsValidator>
    
    <div class="mb">
        <InputNumber @bind-Value="_model.Height" class="form-input" type="number" step="0.01" placeholder="Altura"></InputNumber>
        <span class="form-input-invalid">
            <ValidationMessage For="@(() => _model.Height)"></ValidationMessage>
        </span>
    </div>
    <div class="mb">
        <InputNumber @bind-Value="_model.Weight" class="form-input" type="number" step="0.1" placeholder="Peso"></InputNumber>
        <span class="form-input-invalid">
            <ValidationMessage For="@(() => _model.Weight)"></ValidationMessage>
        </span>
    </div>

    <div class="flex flex-center">
        <button type="submit" class="btn btn-filled btn-auto mb">
            Calcular meu IMC
        </button>
        <a class="btn btn-link" href="#about">
            Entenda o cálculo
        </a>
    </div>

</EditForm>

<Dialog @ref="_dialog" OnModelCloseCallBack="@OnModalClose">
    @if (_model.Imc < 18.6)
            {
        <h1>Abaixo do peso ⚠️</h1>
        <p>Você está abaixo do peso indicado</p>
    }
    else if (_model.Imc >= 18.6 && _model.Imc <= 24.9)
    {
        <h1>peso ideal ✅</h1>
        <p>Você está No peso Ideal</p>
    }else if(_model.Imc >= 24.9)
    {
        <h1>SobrePeso 🔴</h1>
        <p>Você está acima do peso indicado</p>
    }

</Dialog>


@code {


    private ImcModel _model = new();
    private Dialog _dialog = null!;

    public async Task OnValidSubmitAsync()
    {
        await ShowModalAsync();
    }

    private Task ShowModalAsync() 
    => _dialog.ShowModalAsync();

    private async Task OnModalClose()
    {
        AppState.History.Add(_model);
        await LocalStorage.SetItemAsync("data", AppState.History);
        AppState.NotifyChanges(_model, null);

        _model = new();
    }


}
